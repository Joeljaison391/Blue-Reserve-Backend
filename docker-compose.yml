version: "3.8"

services:
  db:
    image: postgres:14
    container_name: blu_reserve_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blu_reserve
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - blu_network
    healthcheck:  # âœ… Ensure DB is ready before other services
      test: ["CMD-SHELL", "pg_isready -U postgres -d blu_reserve"]
      interval: 5s
      timeout: 3s
      retries: 10

  db_init:
    build:
      context: ./scripts
    container_name: db_initializer
    depends_on:
      db:
        condition: service_healthy  # Ensure DB is healthy before running init
    environment:
      DB_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blu_reserve
    networks:
      - blu_network
    restart: "no"  # Run once and exit

  auth_service:
    build:
      context: ./services/auth_service
    container_name: auth_service
    environment:
      DB_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blu_reserve
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
    networks:
      - blu_network

  user_management_service:
    build:
      context: ./services/user_management
    container_name: user_management_service
    environment:
      DB_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blu_reserve
    ports:
      - "8001:8001"
    depends_on:
      db:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
    networks:
      - blu_network

  health_service:
    build:
      context: ./services/health_service
    container_name: health_service
    ports:
      - "8005:8005"
    depends_on:
      - auth_service
      - user_management_service
    networks:
      - blu_network

  booking_service:
    build:
      context: ./services/booking_service
    container_name: booking_service
    environment:
      DB_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blu_reserve
    ports:
      - "8003:8003"
    depends_on:
      db:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
      auth_service:
      user_management_service:
    networks:
      - blu_network

  seat_service:
    build:
      context: ./services/seat_service
    container_name: seat_service
    environment:
      DB_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: blu_reserve
    ports:
      - "8004:8004"
    depends_on:
      db:
        condition: service_healthy
      db_init:
        condition: service_completed_successfully
      auth_service:
      user_management_service:
    networks:
      - blu_network

#  gateway:
#    image: nginx:latest
#    container_name: api_gateway
#    volumes:
#      - ./gateway/nginx.conf:/etc/nginx/nginx.conf
#    ports:
#      - "8080:80"
#    depends_on:
#      - auth_service
#      - user_management_service
#      - health_service
#    networks:
#      - blu_network

volumes:
  db_data:

networks:
  blu_network:
    driver: bridge
